// server.js - Giao di·ªán ƒë∆∞·ª£c n√¢ng c·∫•p v√† c√≥ th·ªÉ t√πy ch·ªânh

import express from 'express';
import { createCanvas } from 'canvas';
import GIFEncoder from 'gif-encoder-2';
import { parseISO, differenceInSeconds } from 'date-fns';

const app = express();
const PORT = process.env.PORT || 3000;

// === H√ÄM H·ªñ TR·ª¢ V·∫º H√åNH CH·ªÆ NH·∫¨T BO G√ìC ===
// node-canvas kh√¥ng c√≥ s·∫µn h√†m n√†y, n√™n ch√∫ng ta t·ª± t·∫°o.
function drawRoundedRect(ctx, x, y, width, height, radius) {
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.arcTo(x + width, y, x + width, y + radius, radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.arcTo(x + width, y + height, x + width - radius, y + height, radius);
    ctx.lineTo(x + radius, y + height);
    ctx.arcTo(x, y + height, x, y + height - radius, radius);
    ctx.lineTo(x, y + radius);
    ctx.arcTo(x, y, x + radius, y, radius);
    ctx.closePath();
    ctx.fill();
}

app.get('/api/countdown.gif', (req, res) => {
    // === 1. L·∫§Y V√Ä X·ª¨ L√ù T·∫§T C·∫¢ THAM S·ªê T·ª™ URL ===
    const { time, duration, bg1, bg2, boxcolor, textcolor, labelcolor } = req.query;
    const hexColorRegex = /^[0-9a-fA-F]{6}$/;

    // X·ª≠ l√Ω tham s·ªë 'time' v√† 'duration'
    if (!time) return res.status(400).send('Thi·∫øu tham s·ªë "time".');
    const targetDate = parseISO(time);
    if (isNaN(targetDate.getTime())) return res.status(400).send('ƒê·ªãnh d·∫°ng "time" kh√¥ng h·ª£p l·ªá.');
    let gifDuration = parseInt(duration, 10);
    if (isNaN(gifDuration) || gifDuration < 1) gifDuration = 5;
    if (gifDuration > 60) gifDuration = 60;

    // X·ª≠ l√Ω c√°c tham s·ªë m√†u s·∫Øc v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p ho·∫∑c kh√¥ng h·ª£p l·ªá
    const colors = {
        bg1:       hexColorRegex.test(bg1) ? `#${bg1}` : '#0b1226',        // M√†u n·ªÅn b·∫Øt ƒë·∫ßu: Xanh ƒëen ƒë·∫≠m
        bg2:       hexColorRegex.test(bg2) ? `#${bg2}` : '#1e3050',        // M√†u n·ªÅn k·∫øt th√∫c: Xanh navy
        box:       hexColorRegex.test(boxcolor) ? `#${boxcolor}` : '#134074',  // M√†u kh·ªëi: Xanh bi·ªÉn ƒë·∫≠m
        text:      hexColorRegex.test(textcolor) ? `#${textcolor}` : '#FFFFFF',    // M√†u s·ªë: Tr·∫Øng
        label:     hexColorRegex.test(labelcolor) ? `#${labelcolor}` : '#a9c1e1', // M√†u nh√£n: Xanh nh·∫°t
    };

    // === 2. C√ÄI ƒê·∫∂T CANVAS V√Ä GIF ENCODER ===
    const width = 450; // TƒÉng chi·ªÅu r·ªông ƒë·ªÉ c√≥ th√™m kh√¥ng gian cho thi·∫øt k·∫ø m·ªõi
    const height = 120; // TƒÉng chi·ªÅu cao
    res.setHeader('Content-Type', 'image/gif');
    const encoder = new GIFEncoder(width, height);
    encoder.createReadStream().pipe(res);
    encoder.start();
    encoder.setRepeat(0);
    encoder.setDelay(1000);
    encoder.setQuality(10);
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    const now = new Date();
    const initialSecondsLeft = differenceInSeconds(targetDate, now);
    const numberOfFrames = gifDuration;

    for (let i = 0; i < numberOfFrames; i++) {
        let currentFrameSeconds = initialSecondsLeft - i;
        if (currentFrameSeconds < 0) currentFrameSeconds = 0;

        const timeUnits = {
            Ng√†y: Math.floor(currentFrameSeconds / (3600 * 24)),
            Gi·ªù: Math.floor((currentFrameSeconds % (3600 * 24)) / 3600),
            Ph√∫t: Math.floor((currentFrameSeconds % 3600) / 60),
            Gi√¢y: currentFrameSeconds % 60,
        };

        // === 3. B·∫ÆT ƒê·∫¶U V·∫º GIAO DI·ªÜN M·ªöI ===

        // 3.1. V·∫Ω n·ªÅn gradient cho chi·ªÅu s√¢u
        const gradient = ctx.createLinearGradient(0, 0, 0, height);
        gradient.addColorStop(0, colors.bg1);
        gradient.addColorStop(1, colors.bg2);
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, width, height);

        // 3.2. C√†i ƒë·∫∑t th√¥ng s·ªë cho c√°c kh·ªëi ƒë·ªÉ cƒÉn gi·ªØa
        const boxWidth = 80;
        const boxHeight = 80;
        const gap = 20;
        const totalContentWidth = (4 * boxWidth) + (3 * gap);
        const startX = (width - totalContentWidth) / 2;
        const startY = (height - boxHeight) / 2;
        
        let currentX = startX;

        // 3.3. L·∫∑p qua v√† v·∫Ω t·ª´ng kh·ªëi th·ªùi gian (Ng√†y, Gi·ªù, Ph√∫t, Gi√¢y)
        for (const [label, value] of Object.entries(timeUnits)) {
            // V·∫Ω kh·ªëi n·ªÅn bo g√≥c
            ctx.fillStyle = colors.box;
            drawRoundedRect(ctx, currentX, startY, boxWidth, boxHeight, 10);
            
            // V·∫Ω s·ªë (to, ·ªü tr√™n)
            ctx.fillStyle = colors.text;
            ctx.font = 'bold 36px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(String(value).padStart(2, '0'), currentX + boxWidth / 2, startY + boxHeight / 2 - 10);

            // V·∫Ω nh√£n (nh·ªè, ·ªü d∆∞·ªõi)
            ctx.fillStyle = colors.label;
            ctx.font = '14px Arial';
            ctx.fillText(label.toUpperCase(), currentX + boxWidth / 2, startY + boxHeight / 2 + 25);

            // C·∫≠p nh·∫≠t v·ªã tr√≠ X cho kh·ªëi ti·∫øp theo
            currentX += boxWidth + gap;
        }

        encoder.addFrame(ctx);
    }

    encoder.finish();
});

// URL v√≠ d·ª• ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ tr√¨nh di·ªÖn giao di·ªán m·ªõi v√† c√°c tham s·ªë m√†u
const testDate = new Date(Date.now() + 5 * 24 * 60 * 60 * 1000);
const isoTime = testDate.toISOString();

app.listen(PORT, () => {
    console.log(`Server t·∫°o ·∫£nh GIF ƒê·ªòNG (demo) ƒëang ch·∫°y.`);
    console.log(`\nüé® Giao di·ªán m·∫∑c ƒë·ªãnh (10 gi√¢y):`);
    console.log(`http://localhost:${PORT}/api/countdown.gif?time=${isoTime}&duration=10`);

    console.log(`\nüé® Giao di·ªán t√¥ng m√†u N√≥ng (Cam/ƒê·ªè):`);
    console.log(`http://localhost:${PORT}/api/countdown.gif?time=${isoTime}&duration=10&bg1=4a0e0e&bg2=8e2f17&boxcolor=c2482a&textcolor=ffffff&labelcolor=fdd3c9`);

    console.log(`\nüé® Giao di·ªán t√¥ng m√†u Xanh l√°:`);
    console.log(`http://localhost:${PORT}/api/countdown.gif?time=${isoTime}&duration=10&bg1=032b13&bg2=0f522e&boxcolor=1a7d49&textcolor=ffffff&labelcolor=b6e6ce`);
});
